#include <WiFi.h>             // Librería para manejar la conexión WiFi.
#include <PubSubClient.h>     // Librería para gestionar la comunicación con el protocolo MQTT.

// Configuración de la red WiFi.
const char* ssid = "INFINITUM35E4";   // Nombre de la red WiFi (SSID).
const char* password = "Bx5Ff6Pm2s"; // Contraseña de la red WiFi.

// Configuración del servidor MQTT.
const char* mqttServer = "broker.hivemq.com"; // Dirección del servidor MQTT.
const int mqttPort = 1883;                   // Puerto para la conexión MQTT (estándar).

// Tema MQTT utilizado para controlar el LED.
const char* ledTopic = "osky"; // Tema al que el cliente MQTT se suscribirá para recibir mensajes.

// Pin donde está conectado el LED.
const int ledPin = 26; // Número de pin GPIO al que está conectado el LED.

// Objetos de conexión WiFi y cliente MQTT.
WiFiClient wifiClient;          // Objeto para gestionar la conexión WiFi.
PubSubClient mqttClient(wifiClient); // Cliente MQTT que utiliza la conexión WiFi.

// Función para conectar a la red WiFi.
void setupWifi() {
  Serial.print("Conectando a la red WiFi"); // Mensaje inicial de conexión.
  WiFi.begin(ssid, password);              // Intenta conectar con las credenciales proporcionadas.

  // Espera hasta que se establezca la conexión WiFi.
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);                            // Retardo para evitar saturación.
    Serial.print(".");                     // Muestra progreso en el monitor serial.
  }

  Serial.println("\nConectado a la red WiFi"); // Mensaje cuando la conexión se establece.
}

// Función que se ejecuta cuando llega un mensaje MQTT.
void callback(char* topic, byte* payload, unsigned int length) {
  Serial.print("Mensaje recibido en el tema: "); 
  Serial.println(topic); // Imprime el tema donde se recibió el mensaje.

  // Convierte el contenido del mensaje (payload) a un objeto String para facilitar su manejo.
  String message;
  for (unsigned int i = 0; i < length; i++) {
    message += (char)payload[i];
  }

  Serial.print("Contenido del mensaje: ");
  Serial.println(message); // Muestra el contenido del mensaje recibido.

  // Comprueba si el mensaje pertenece al tema configurado para controlar el LED.
  if (String(topic) == ledTopic) {
    if (message == "ON") {
      digitalWrite(ledPin, HIGH);  // Enciende el LED.
      Serial.println("LED encendido");
    } else if (message == "OFF") {
      digitalWrite(ledPin, LOW);   // Apaga el LED.
      Serial.println("LED apagado");
    } else {
      Serial.println("Mensaje no reconocido"); // Indica un mensaje no válido.
    }
  }
}

// Función para reconectar al servidor MQTT si la conexión se pierde.
void reconnect() {
  // Reintenta la conexión hasta que sea exitosa.
  while (!mqttClient.connected()) {
    Serial.print("Conectando al servidor MQTT...");
    // Conecta al servidor MQTT con un nombre único para el cliente.
    if (mqttClient.connect("ESP32Client")) {
      Serial.println("Conectado");

      // Se suscribe al tema para recibir mensajes.
      mqttClient.subscribe(ledTopic);
      Serial.println("Suscrito al tema: osky");
    } else {
      // Si la conexión falla, muestra el error y reintenta en 5 segundos.
      Serial.print("Fallo de conexión. Código de error: ");
      Serial.print(mqttClient.state());
      Serial.println(" Intentando reconectar en 5 segundos...");
      delay(5000);
    }
  }
}

// Configuración inicial del dispositivo.
void setup() {
  Serial.begin(115200); // Inicia la comunicación serial a 115200 baudios para depuración.

  pinMode(ledPin, OUTPUT); // Configura el pin del LED como salida.

  setupWifi(); // Conecta a la red WiFi.

  mqttClient.setServer(mqttServer, mqttPort); // Configura el servidor MQTT y el puerto.
  mqttClient.setCallback(callback);          // Asigna la función callback para manejar mensajes.

  reconnect(); // Realiza la conexión inicial al servidor MQTT.
}

// Bucle principal del programa.
void loop() {
  // Verifica que el cliente MQTT siga conectado, y si no, intenta reconectar.
  if (!mqttClient.connected()) {
    reconnect();
  }

  // Mantiene el cliente MQTT en funcionamiento y procesa mensajes entrantes.
  mqttClient.loop();
}
